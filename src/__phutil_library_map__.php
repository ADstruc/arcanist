<?php

/**
 * This file is automatically generated. Use 'phutil_mapper.php' to rebuild it.
 * @generated
 */

phutil_register_library_map(array(
  'class' =>
  array(
    'ArcanistAmendWorkflow' => 'workflow/amend',
    'ArcanistApacheLicenseLinter' => 'lint/linter/apachelicense',
    'ArcanistBaseUnitTestEngine' => 'unit/engine/base',
    'ArcanistBaseWorkflow' => 'workflow/base',
    'ArcanistBundle' => 'parser/bundle',
    'ArcanistChooseInvalidRevisionException' => 'exception',
    'ArcanistChooseNoRevisionsException' => 'exception',
    'ArcanistCommitWorkflow' => 'workflow/commit',
    'ArcanistConfiguration' => 'configuration',
    'ArcanistCoverWorkflow' => 'workflow/cover',
    'ArcanistDiffChange' => 'parser/diff/change',
    'ArcanistDiffChangeType' => 'parser/diff/changetype',
    'ArcanistDiffHunk' => 'parser/diff/hunk',
    'ArcanistDiffParser' => 'parser/diff',
    'ArcanistDiffParserTestCase' => 'parser/diff/__tests__',
    'ArcanistDiffWorkflow' => 'workflow/diff',
    'ArcanistDifferentialCommitMessage' => 'differential/commitmessage',
    'ArcanistDifferentialCommitMessageParserException' => 'differential/commitmessage',
    'ArcanistDifferentialRevisionRef' => 'differential/revision',
    'ArcanistExportWorkflow' => 'workflow/export',
    'ArcanistFilenameLinter' => 'lint/linter/filename',
    'ArcanistGeneratedLinter' => 'lint/linter/generated',
    'ArcanistGitAPI' => 'repository/api/git',
    'ArcanistGitHookPreReceiveWorkflow' => 'workflow/git-hook-pre-receive',
    'ArcanistHelpWorkflow' => 'workflow/help',
    'ArcanistLintEngine' => 'lint/engine/base',
    'ArcanistLintMessage' => 'lint/message',
    'ArcanistLintPatcher' => 'lint/patcher',
    'ArcanistLintRenderer' => 'lint/renderer',
    'ArcanistLintResult' => 'lint/result',
    'ArcanistLintSeverity' => 'lint/severity',
    'ArcanistLintWorkflow' => 'workflow/lint',
    'ArcanistLinter' => 'lint/linter/base',
    'ArcanistListWorkflow' => 'workflow/list',
    'ArcanistMarkCommittedWorkflow' => 'workflow/mark-committed',
    'ArcanistNoEffectException' => 'exception/usage/noeffect',
    'ArcanistNoEngineException' => 'exception/usage/noengine',
    'ArcanistPEP8Linter' => 'lint/linter/pep8',
    'ArcanistPatchWorkflow' => 'workflow/patch',
    'ArcanistPhutilModuleLinter' => 'lint/linter/phutilmodule',
    'ArcanistPhutilTestCase' => 'unit/engine/phutil/testcase',
    'ArcanistPhutilTestTerminatedException' => 'unit/engine/phutil/testcase/exception',
    'ArcanistRepositoryAPI' => 'repository/api/base',
    'ArcanistSubversionAPI' => 'repository/api/subversion',
    'ArcanistTextLinter' => 'lint/linter/text',
    'ArcanistUnitTestResult' => 'unit/result',
    'ArcanistUnitWorkflow' => 'workflow/unit',
    'ArcanistUsageException' => 'exception/usage',
    'ArcanistUserAbortException' => 'exception/usage/userabort',
    'ArcanistWorkingCopyIdentity' => 'workingcopyidentity',
    'ArcanistXHPASTLinter' => 'lint/linter/xhpast',
    'ArcanistXHPASTLinterTestCase' => 'lint/linter/xhpast/__tests__',
    'PhutilLintEngine' => 'lint/engine/phutil',
    'PhutilModuleRequirements' => 'staticanalysis/parsers/phutilmodule',
    'PhutilUnitTestEngine' => 'unit/engine/phutil',
    'UnitTestableArcanistLintEngine' => 'lint/engine/test',
    'XHPASTNode' => 'staticanalysis/parsers/xhpast/api/node',
    'XHPASTNodeList' => 'staticanalysis/parsers/xhpast/api/list',
    'XHPASTSyntaxErrorException' => 'staticanalysis/parsers/xhpast/api/exception',
    'XHPASTToken' => 'staticanalysis/parsers/xhpast/api/token',
    'XHPASTTree' => 'staticanalysis/parsers/xhpast/api/tree',
  ),
  'function' =>
  array(
    'xhp_parser_node_constants' => 'staticanalysis/parsers/xhpast/constants',
    'xhpast_get_parser_future' => 'staticanalysis/parsers/xhpast/bin',
    'xhpast_parser_token_constants' => 'staticanalysis/parsers/xhpast/constants',
  ),
  'requires_class' =>
  array(
    'ArcanistAmendWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistApacheLicenseLinter' => 'ArcanistLinter',
    'ArcanistCommitWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistCoverWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistDiffParserTestCase' => 'ArcanistPhutilTestCase',
    'ArcanistDiffWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistExportWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistFilenameLinter' => 'ArcanistLinter',
    'ArcanistGeneratedLinter' => 'ArcanistLinter',
    'ArcanistGitAPI' => 'ArcanistRepositoryAPI',
    'ArcanistGitHookPreReceiveWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistHelpWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistLintWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistListWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistMarkCommittedWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistNoEffectException' => 'ArcanistUsageException',
    'ArcanistNoEngineException' => 'ArcanistUsageException',
    'ArcanistPEP8Linter' => 'ArcanistLinter',
    'ArcanistPatchWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistPhutilModuleLinter' => 'ArcanistLinter',
    'ArcanistSubversionAPI' => 'ArcanistRepositoryAPI',
    'ArcanistTextLinter' => 'ArcanistLinter',
    'ArcanistUnitWorkflow' => 'ArcanistBaseWorkflow',
    'ArcanistUserAbortException' => 'ArcanistUsageException',
    'ArcanistXHPASTLinter' => 'ArcanistLinter',
    'ArcanistXHPASTLinterTestCase' => 'ArcanistPhutilTestCase',
    'PhutilLintEngine' => 'ArcanistLintEngine',
    'PhutilUnitTestEngine' => 'ArcanistBaseUnitTestEngine',
    'UnitTestableArcanistLintEngine' => 'ArcanistLintEngine',
  ),
  'requires_interface' =>
  array(
  ),
));
